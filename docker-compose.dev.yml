services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: queue_worker_postgres_dev
    environment:
      POSTGRES_DB: queue_worker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
    ports:
      - '55001:5432'
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d queue_worker']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - queue_worker_network_dev

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: queue_worker_rabbitmq_dev
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - '5672:5672' # AMQP port
      - '15672:15672' # Management UI port
    volumes:
      - rabbitmq_data_dev:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - queue_worker_network_dev

  # NestJS Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    container_name: queue_worker_app_dev
    environment:
      NODE_ENV: development
      HOST: 0.0.0.0
      PORT: 3030

      # Database configuration
      DB_NAME: queue_worker
      DB_HOST: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgrespw
      DB_PORT: 5432
      DB_SYNCHRONIZE: true
      AUTO_SEED_DATABASE: false

      # RabbitMQ configuration
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_QUEUE_NAME: worker_queue
    ports:
      - '3030:3030'
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./yarn.lock:/app/yarn.lock
      - ./.yarnrc.yml:/app/.yarnrc.yml
      - ./.yarn:/app/.yarn
      - ./tsconfig.json:/app/tsconfig.json
      - ./nest-cli.json:/app/nest-cli.json
      - ./eslint.config.mjs:/app/eslint.config.mjs
      - ./test:/app/test
      - node_modules_dev:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - queue_worker_network_dev
    command: yarn start:dev

volumes:
  postgres_data_dev:
    driver: local
  rabbitmq_data_dev:
    driver: local
  node_modules_dev:
    driver: local

networks:
  queue_worker_network_dev:
    driver: bridge
